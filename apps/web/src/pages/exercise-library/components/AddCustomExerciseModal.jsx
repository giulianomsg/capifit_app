import React, { useState } from 'react';
import Button from '../../../components/ui/Button';
import Input from '../../../components/ui/Input';
import Select from '../../../components/ui/Select';
import Icon from '../../../components/AppIcon';

const AddCustomExerciseModal = ({ onClose, onSave }) => {
  const [formData, setFormData] = useState({
    nome: '',
    categoria: '',
    grupoMuscular: '',
    equipamento: '',
    dificuldade: '',
    instrucoes: '',
    tags: '',
    videoFile: null,
    imageFile: null
  });

  const [errors, setErrors] = useState({});

  const categories = ['Musculação', 'Funcional', 'Cardio', 'Flexibilidade'];
  const muscleGroups = ['Peito', 'Costas', 'Pernas', 'Ombros', 'Braços', 'Core'];
  const difficulties = ['Iniciante', 'Intermediário', 'Avançado'];
  const equipment = ['Peso Corporal', 'Halteres', 'Barras', 'Máquinas', 'Cabos', 'Kettlebell'];

  const handleInputChange = (e) => {
    const { name, value } = e?.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Clear error when user starts typing
    if (errors?.[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const handleFileChange = (e, type) => {
    const file = e?.target?.files?.[0];
    setFormData(prev => ({
      ...prev,
      [type]: file
    }));
  };

  const validateForm = () => {
    const newErrors = {};
    
    if (!formData?.nome?.trim()) {
      newErrors.nome = 'Nome do exercício é obrigatório';
    }
    
    if (!formData?.categoria) {
      newErrors.categoria = 'Categoria é obrigatória';
    }
    
    if (!formData?.grupoMuscular) {
      newErrors.grupoMuscular = 'Grupo muscular é obrigatório';
    }
    
    if (!formData?.equipamento) {
      newErrors.equipamento = 'Equipamento é obrigatório';
    }
    
    if (!formData?.dificuldade) {
      newErrors.dificuldade = 'Dificuldade é obrigatória';
    }
    
    if (!formData?.instrucoes?.trim()) {
      newErrors.instrucoes = 'Instruções são obrigatórias';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors)?.length === 0;
  };

  const handleSubmit = (e) => {
    e?.preventDefault();
    
    if (!validateForm()) return;
    
    // Process tags
    const tags = formData?.tags?.split(',')?.map(tag => tag?.trim())?.filter(tag => tag?.length > 0);
    
    const exerciseData = {
      ...formData,
      tags,
      id: Date.now(), // In real app, this would be generated by backend
      rating: 0,
      isFavorite: false,
      imagem: formData?.imageFile ? URL.createObjectURL(formData?.imageFile) : '/api/placeholder/300/200',
      alt: `Exercício personalizado: ${formData?.nome}`,
      videoUrl: formData?.videoFile ? URL.createObjectURL(formData?.videoFile) : null,
      musculosAtivados: [formData?.grupoMuscular], // Simplified for custom exercises
      calorias: 5, // Default value
      tempo: '3 séries de 8-12 repetições' // Default value
    };
    
    onSave(exerciseData);
  };

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center">
      {/* Backdrop */}
      <div className="absolute inset-0 bg-black/50" onClick={onClose} />
      
      {/* Modal */}
      <div className="relative bg-card rounded-lg border border-border max-w-2xl w-full mx-4 max-h-[90vh] overflow-hidden">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-border">
          <h2 className="text-xl font-bold text-foreground">Adicionar Exercício Personalizado</h2>
          <Button variant="ghost" onClick={onClose} iconName="X" />
        </div>

        {/* Form */}
        <form onSubmit={handleSubmit} className="p-6 overflow-y-auto max-h-[calc(90vh-140px)]">
          <div className="space-y-4">
            {/* Exercise Name */}
            <Input
              label="Nome do Exercício"
              name="nome"
              placeholder="Ex: Supino Inclinado com Halteres"
              value={formData?.nome}
              onChange={handleInputChange}
              error={errors?.nome}
              required
            />

            {/* Category and Muscle Group */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Select
                label="Categoria"
                name="categoria"
                value={formData?.categoria}
                onChange={handleInputChange}
                error={errors?.categoria}
                required
                options={[
                  { value: '', label: 'Selecione uma categoria' },
                  ...categories?.map(cat => ({ value: cat, label: cat }))
                ]}
              />

              <Select
                label="Grupo Muscular"
                name="grupoMuscular"
                value={formData?.grupoMuscular}
                onChange={handleInputChange}
                error={errors?.grupoMuscular}
                required
                options={[
                  { value: '', label: 'Selecione um grupo' },
                  ...muscleGroups?.map(group => ({ value: group, label: group }))
                ]}
              />
            </div>

            {/* Equipment and Difficulty */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Select
                label="Equipamento"
                name="equipamento"
                value={formData?.equipamento}
                onChange={handleInputChange}
                error={errors?.equipamento}
                required
                options={[
                  { value: '', label: 'Selecione o equipamento' },
                  ...equipment?.map(eq => ({ value: eq, label: eq }))
                ]}
              />

              <Select
                label="Dificuldade"
                name="dificuldade"
                value={formData?.dificuldade}
                onChange={handleInputChange}
                error={errors?.dificuldade}
                required
                options={[
                  { value: '', label: 'Selecione a dificuldade' },
                  ...difficulties?.map(diff => ({ value: diff, label: diff }))
                ]}
              />
            </div>

            {/* Instructions */}
            <div>
              <label className="block text-sm font-medium text-foreground mb-2">
                Instruções de Execução *
              </label>
              <textarea
                name="instrucoes"
                rows={4}
                placeholder="Descreva como executar o exercício passo a passo..."
                value={formData?.instrucoes}
                onChange={handleInputChange}
                className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary transition-colors ${
                  errors?.instrucoes ? 'border-destructive' : 'border-border'
                }`}
                required
              />
              {errors?.instrucoes && (
                <p className="mt-1 text-sm text-destructive">{errors?.instrucoes}</p>
              )}
            </div>

            {/* Tags */}
            <Input
              label="Tags (separadas por vírgula)"
              name="tags"
              placeholder="Ex: força, hipertrofia, básico"
              value={formData?.tags}
              onChange={handleInputChange}
              help="Use tags para facilitar a busca do exercício"
            />

            {/* File Uploads */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {/* Image Upload */}
              <div>
                <label className="block text-sm font-medium text-foreground mb-2">
                  Imagem do Exercício
                </label>
                <div className="border-2 border-dashed border-border rounded-lg p-4 text-center hover:border-primary/50 transition-colors">
                  <input
                    type="file"
                    accept="image/*"
                    onChange={(e) => handleFileChange(e, 'imageFile')}
                    className="hidden"
                    id="image-upload"
                  />
                  <label htmlFor="image-upload" className="cursor-pointer">
                    <Icon name="Upload" size={24} className="mx-auto mb-2 text-muted-foreground" />
                    <p className="text-sm text-muted-foreground">
                      {formData?.imageFile ? formData?.imageFile?.name : 'Clique para upload da imagem'}
                    </p>
                  </label>
                </div>
              </div>

              {/* Video Upload */}
              <div>
                <label className="block text-sm font-medium text-foreground mb-2">
                  Vídeo Demonstrativo
                </label>
                <div className="border-2 border-dashed border-border rounded-lg p-4 text-center hover:border-primary/50 transition-colors">
                  <input
                    type="file"
                    accept="video/*"
                    onChange={(e) => handleFileChange(e, 'videoFile')}
                    className="hidden"
                    id="video-upload"
                  />
                  <label htmlFor="video-upload" className="cursor-pointer">
                    <Icon name="Video" size={24} className="mx-auto mb-2 text-muted-foreground" />
                    <p className="text-sm text-muted-foreground">
                      {formData?.videoFile ? formData?.videoFile?.name : 'Clique para upload do vídeo'}
                    </p>
                  </label>
                </div>
              </div>
            </div>
          </div>
        </form>

        {/* Footer */}
        <div className="flex items-center justify-end space-x-3 p-6 border-t border-border bg-muted/30">
          <Button variant="outline" onClick={onClose}>
            Cancelar
          </Button>
          <Button onClick={handleSubmit} iconName="Save" iconPosition="left">
            Salvar Exercício
          </Button>
        </div>
      </div>
    </div>
  );
};

export default AddCustomExerciseModal;