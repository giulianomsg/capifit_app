generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  INVITED
}

enum SubscriptionPlan {
  MONTHLY
  QUARTERLY
  ANNUAL
  CUSTOM
}

enum PaymentStatus {
  ON_TIME
  PENDING
  LATE
}

enum ActivityLevel {
  HIGH
  MEDIUM
  LOW
  INACTIVE
}

enum TrainerClientStatus {
  ACTIVE
  PAUSED
  ENDED
  INVITED
}

enum WorkoutStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum WorkoutDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ExerciseCategory {
  STRENGTH
  CARDIO
  FLEXIBILITY
  MOBILITY
  BALANCE
}

enum MuscleGroup {
  CHEST
  BACK
  SHOULDERS
  LEGS
  ARMS
  CORE
  FULL_BODY
  GLUTES
  OTHER
}

model User {
  id                 String           @id @default(cuid())
  name               String
  email              String           @unique
  passwordHash       String
  status             UserStatus       @default(ACTIVE)
  avatarUrl          String?
  phone              String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  deletedAt          DateTime?
  roles              UserRole[]
  refreshTokens      RefreshToken[]
  auditLogs          AuditLog[]
  clientProfile      ClientProfile?
  trainerAssignments TrainerClient[] @relation("TrainerAssignments")
  clientAssignments  TrainerClient[] @relation("ClientAssignments")
  exercises          Exercise[]       @relation("ExerciseCreators")
  workoutsCreated    Workout[]        @relation("TrainerWorkouts")
  workoutsAssigned   Workout[]        @relation("ClientWorkouts")
  sessionLogs        SessionLog[]     @relation("UserSessionLogs")
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  users       UserRole[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model UserRole {
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([roleId])
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  tokenHash String
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([tokenHash])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  entity    String?
  entityId  String?
  metadata  Json?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entity, entityId])
}

model ClientProfile {
  id                 String           @id @default(cuid())
  userId             String           @unique
  phone              String?
  dateOfBirth        DateTime?
  gender             String?
  subscriptionPlan   SubscriptionPlan @default(MONTHLY)
  paymentStatus      PaymentStatus    @default(ON_TIME)
  lastWorkoutAt      DateTime?
  nextAssessmentAt   DateTime?
  progressPercentage Int              @default(0)
  activityLevel      ActivityLevel    @default(MEDIUM)
  experienceLevel    String?
  goals              String[]         @default([])
  medicalConditions  String?
  notes              String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TrainerClient {
  id        String              @id @default(cuid())
  trainerId String
  clientId  String
  status    TrainerClientStatus @default(ACTIVE)
  startedAt DateTime            @default(now())
  endedAt   DateTime?
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  trainer   User                @relation("TrainerAssignments", fields: [trainerId], references: [id])
  client    User                @relation("ClientAssignments", fields: [clientId], references: [id])

  @@unique([trainerId, clientId])
  @@index([clientId])
}

model Exercise {
  id                 String            @id @default(cuid())
  name               String
  slug               String            @unique
  description        String?
  instructions       String?
  category           ExerciseCategory
  primaryMuscle      MuscleGroup
  secondaryMuscle    MuscleGroup?
  equipment          String?
  difficulty         WorkoutDifficulty @default(INTERMEDIATE)
  videoUrl           String?
  imageUrl           String?
  caloriesPerSet     Int?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  deletedAt          DateTime?
  isPublic           Boolean           @default(true)
  createdById        String?
  createdBy          User?             @relation("ExerciseCreators", fields: [createdById], references: [id], onDelete: SetNull)
  workoutExercises   WorkoutExercise[]

  @@index([category])
  @@index([primaryMuscle])
  @@index([deletedAt])
}

model Workout {
  id                String            @id @default(cuid())
  trainerId         String
  clientId          String?
  title             String
  description       String?
  difficulty        WorkoutDifficulty @default(INTERMEDIATE)
  status            WorkoutStatus     @default(DRAFT)
  frequency         String?           @default("weekly")
  schedule          String[]          @default([])
  startDate         DateTime?
  endDate           DateTime?
  estimatedDuration Int?
  estimatedCalories Int?
  isTemplate        Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?
  trainer           User              @relation("TrainerWorkouts", fields: [trainerId], references: [id], onDelete: Cascade)
  client            User?             @relation("ClientWorkouts", fields: [clientId], references: [id], onDelete: SetNull)
  blocks            WorkoutBlock[]
  sessionLogs       SessionLog[]

  @@index([trainerId])
  @@index([clientId])
  @@index([status])
  @@index([isTemplate])
  @@index([deletedAt])
}

model WorkoutBlock {
  id        String   @id @default(cuid())
  workoutId String
  title     String
  notes     String?
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  workout   Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercises WorkoutExercise[]

  @@index([workoutId])
  @@index([order])
}

model WorkoutExercise {
  id             String        @id @default(cuid())
  blockId        String
  exerciseId     String
  order          Int
  sets           Int
  reps           Int
  weight         Float?
  restSeconds    Int?
  tempo          String?
  instructions   String?
  estimatedTempo Int?
  workoutBlock   WorkoutBlock  @relation(fields: [blockId], references: [id], onDelete: Cascade)
  exercise       Exercise      @relation(fields: [exerciseId], references: [id], onDelete: Restrict)

  @@index([blockId])
  @@index([exerciseId])
}

model SessionLog {
  id              String   @id @default(cuid())
  workoutId       String
  clientId        String
  performedAt     DateTime @default(now())
  durationMinutes Int?
  perceivedEffort Int?
  notes           String?
  createdAt       DateTime @default(now())
  workout         Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  client          User     @relation("UserSessionLogs", fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([workoutId, performedAt])
}
